#include <iostream>
#include <string>
#include <vector>
#include <utility>
#include <cmath>
#include <sstream>
#include <regex>
#include <unordered_set>
#include <algorithm>

//same as first, 
int main(){

    std::string s = R"(...............3................d.................
.........................s..7......i.....e........
................C.......................e.........
...............Z.......m....................e.....
....................gC.....q......................
...............Q....s..........................A..
................................s........A........
...........n.....3.C..F......w..m...d.............
..E...............3.....m......d.i................
............f.3.......C....d........A.............
.........Z...........................n..A.........
....Q......p..............g.i.....................
.r......n...Q....p............S.7...........O.....
..........r......K....p.....M..........7....G.....
....................Fs...................G........
..z.........D..........G.g........................
rR.............F................M...............G.
.........I..c.nr...............M................O.
...I..............................................
...................f......I.......................
z.I...............f..K..........0................7
k...................K......u.........O............
.........Q...z.................ga......0.......o..
....E.5..F..................u..b.P......a.1.......
..........k9..................K.........H......1..
.E.........h..........................0......a...H
..........9...h..e........i......M....1...........
.c.............z.......................j.........T
c..D......................Pb.................2....
....................w.y......W......j.........T.2.
......ph...N..................y.......W.t.2.......
............9.................................o..1
.................Vq.......u....Pb.................
.......6R.........................................
........5............w...a.W.............H.j......
......Z.......Y..........V............H..2........
..........D.................v..y.........t...T..o.
.......5...................t......................
........8k...l...............v.........S....T...4.
......6....U......PR........b.B....y..............
..........6.V...U........................L........
.......8.........N....4.Vq.v..t......oJ.....L.....
N...........R.................w.JY................
............N.....................................
.....5Y.....................................j.....
.98........Y.....l.............B...........S...L..
.8...............U...............4................
..................W.........U4....................
...E........l..........B......................L..u
.....D............l....J..q.....................S.)";

    
    std::stringstream stream(s);
    std::string letters("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
    std::vector<std::vector<char>> map;
    
    std::string line;
    while(std::getline(stream, line)) {
        std::stringstream linestream(line);
        std::vector<char> in;
        char c;
        while (linestream >> c) {
            in.push_back(c);
        }
        map.push_back(in);
    }
    std::vector<std::vector<bool>> antinodes(map.size(), std::vector<bool>(map[0].size(), false));
    for (char c : letters) {
        for (int i = 0; i < map.size(); i++) {
            for (int j = 0; j < map[0].size(); j++) {
                if (map[i][j] == c) {
                    for (int k = i; k < map.size(); k++) {
                        for (int l = 0; l < map[0].size(); l++) {
                            if ((k != i || l != j) && map[k][l] == c) {
                                antinodes[k][l] = true;
                                antinodes[i][j] = true;
                                int diffx = k - i;
                                int diffy = l - j;
                                int tmpx = i, tmpy = j;
                                while (tmpx - diffx >= 0 && tmpx - diffx < map.size() &&
                                    tmpy - diffy >= 0 && tmpy - diffy < map[0].size()){
                                    tmpx -= diffx;
                                    tmpy -= diffy;
                                    antinodes[tmpx][tmpy] = true;

                                }
                                tmpx = k;
                                tmpy = l;
                                while (tmpx + diffx >= 0 && tmpx + diffx < map.size() &&
                                    tmpy + diffy >= 0 && tmpy + diffy < map[0].size()) {
                                    tmpx += diffx;
                                    tmpy += diffy;
                                    antinodes[tmpx][tmpy] = true;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    int count = 0;
    for (int i = 0; i < map.size(); i++){
        for (int j = 0; j < map[0].size(); j++){
            if (antinodes[i][j] == true) 
                count++;
        }
    }
    std::cout << count << std::endl;
    return 0;
}